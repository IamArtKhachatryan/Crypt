#include <iostream>
#include <string>
#include <unordered_map>

class Crypto {
public:
    virtual std::string encrypt(const std::string& plaintext) = 0;
    virtual std::string decrypt(const std::string& ciphertext) = 0;
    virtual ~Crypto() = default;
};

class SimpleSubstitution : public Crypto {
private:
    std::unordered_map<char, char> encryptMap;
    std::unordered_map<char, char> decryptMap;

public:
    SimpleSubstitution() {
        const std::string alphabet = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz";
        const std::string key = "EQWRTYUOPIASDFGHJKLZXCVBNMeqwrtuopiasdfghjklzxcvbnm"; 

        for (size_t i = 0; i < alphabet.length(); ++i) {
            encryptMap[alphabet[i]] = key[i]; 
            decryptMap[key[i]] = alphabet[i]; 
        }
    }

    std::string encrypt(const std::string& plaintext) override {
        std::string ciphertext;
        for (char ch : plaintext) {
            if (encryptMap.find(ch) != encryptMap.end()) {
                ciphertext += encryptMap[ch];
            } else {
                ciphertext += ch;
            }
        }
        return ciphertext;
        return ciphertext;
    }

    std::string decrypt(const std::string& ciphertext) override {
        std::string plaintext;
        for (char ch : ciphertext) {
            if (decryptMap.find(ch) != decryptMap.end()) {
                plaintext += decryptMap[ch];
            } else {
                plaintext += ch;
            }
        }
        return plaintext;
    }
};

class CesarAlgorithm : public Crypto {
private:
    int key;

public:
    void setKey(int k) { key = k; }

    std::string encrypt(const std::string &text) override {
        std::string result;
        int n = 256;
        for (char c : text) {
            result += static_cast<char>((c + key) % n);
        }
        return result;
    }

    std::string decrypt(const std::string &text) override {
        std::string result;
        int n = 256;
        for (char c : text) {
            result += static_cast<char>((c - key + n) % n);
        }
        return result;
    }
};

class RLE {
public:
    static std::string encode(const std::string& str) {
        std::string result;
        int n = str.length();
        for (int i = 0; i < n; i++) {
            int count = 1;
            while (i < n - 1 && str[i] == str[i + 1]) {
                count++;
                i++;
            }
            result += str[i] + std::to_string(count);
        }
        return result;
    }

    static std::string decode(const std::string& str) {
        std::string result;
        for (size_t i = 0; i < str.length(); i++) {
            char ch = str[i];
            i++;
            std::string countStr;
            while (i < str.length() && isdigit(str[i])) {
                countStr += str[i];
                i++;
            }
            i--;
            int count = std::stoi(countStr);
            result += std::string(count, ch);
        }
        return result;
    }
};

void displayMenu() {
    std::cout << "Select encryption method:\n";
    std::cout << "1. Simple Substitution\n";
    std::cout << "2. Caesar Cipher\n";
    std::cout << "3. Run-Length Encoding (RLE)\n";
    std::cout << "4. Exit\n";
}

int main() {
    SimpleSubstitution simpleSubstitution;
    CesarAlgorithm caesar;
    RLE RLE;

    int option;
    std::string text;
    int key;
    std::string encoded; 

    while (true) {
        displayMenu();
        std::cout << "Enter your choice: ";
        std::cin >> option;

        switch (option) {
            case 1: 
                std::cout << "Enter plaintext: ";
                std::cin >> text;
                std::cout << "Encrypted: " << simpleSubstitution.encrypt(text) << std::endl;
                std::cout << "Decrypted: " << simpleSubstitution.decrypt(simpleSubstitution.encrypt(text)) << std::endl;
                break;
            case 2: 
                std::cout << "Enter text: ";
                std::cin >> text;
                std::cout << "Enter key: ";
                std::cin >> key;
                caesar.setKey(key); 
                std::cout << "Encrypted: " << caesar.encrypt(text) << std::endl;
                std::cout << "Decrypted: " << caesar.decrypt(caesar.encrypt(text)) << std::endl;
                break;
            case 3: 
                std::cout << "Enter string for RLE: ";
                std::cin >> text;
                encoded = RLE.encode(text); 
                std::cout << "RLE Encoded: " << encoded << std::endl;
                std::cout << "RLE Decoded: " << RLE::decode(encoded) << std::endl;
                break;
            case 4: 
                return 0;
            default:
                std::cout << "Invalid choice. Please try again.\n";
                break;
        }
    }

    return 0;
}
