#include <iostream>
#include <vector>
#include <string>
#include <sstream>

struct LZ77Token {
    int offset;     
    int length;     
    char nextChar; 
};

class LZ77Compressor {
public:
    LZ77Compressor(int windowSize, int maxMatchLength)
        : windowSize(windowSize), maxMatchLength(maxMatchLength) {}

    std::vector<LZ77Token> compress(const std::string &input) {
        std::vector<LZ77Token> compressedData;
        int inputSize = input.size();
        int pos = 0;

        while (pos < inputSize) {
            int matchLength = 0;
            int matchOffset = 0;

            for (int offset = std::min(pos, windowSize); offset >= 1; --offset) {
                int length = 0;
                while (length < maxMatchLength && pos + length < inputSize &&
                       input[pos - offset + length] == input[pos + length]) {
                    ++length;
                }
                if (length > matchLength) {
                    matchLength = length;
                    matchOffset = offset;
                }
            }

            if (matchLength < 2) {
                compressedData.push_back({0, 0, input[pos]});
                pos += 1;
            } else {
                char nextChar = (pos + matchLength < inputSize) ? input[pos + matchLength] : '\0';
                compressedData.push_back({matchOffset, matchLength, nextChar});
                pos += matchLength + 1;
            }
        }
        return compressedData;
    }

    std::string getCompressedDataAsString(const std::vector<LZ77Token> &compressedData) {
        std::stringstream compressedString;
        for (const auto &token : compressedData) {
            if (token.length == 0)
                compressedString << token.nextChar;
            else
                compressedString << "[" << token.offset << "|" << token.length << "|" << token.nextChar << "] ";
        }
        return compressedString.str();
    }

    std::string decompress(const std::vector<LZ77Token> &compressedData) {
        std::string output;
        for (const auto &token : compressedData) {
            int start = output.size() - token.offset;
            for (int i = 0; i < token.length; ++i) {
                output += output[start + i];
            }
            if (token.nextChar != '\0') {
                output += token.nextChar;
            }
        }
        return output;
    }

private:
    int windowSize;
    int maxMatchLength;
};

int main() {
    std::string input = "The compression and the decompression leave an impression. Hahahahaha!";
    LZ77Compressor compressor(4096, 15);

    std::vector<LZ77Token> compressedData = compressor.compress(input);

    std::string compressedString = compressor.getCompressedDataAsString(compressedData);

    std::cout << "Compressed data as string:\n" << compressedString << "\n";

    std::string decompressedData = compressor.decompress(compressedData);
    std::cout << "Decompressed data:\n" << decompressedData << "\n";

    return 0;
}
